definitions:
  controllers.DeleteOverdueDeathsRequest:
    properties:
      game:
        example: overwatch
        type: string
    required:
    - game
    type: object
  controllers.DeleteSportsReply:
    properties:
      message:
        type: string
    type: object
  controllers.ErrorReply:
    properties:
      error:
        type: string
    type: object
  controllers.FriendRequest:
    properties:
      friend_id:
        type: integer
      status:
        $ref: '#/definitions/models.FriendshipStatus'
    required:
    - friend_id
    type: object
  controllers.FriendshipReply:
    properties:
      friendships:
        items:
          $ref: '#/definitions/models.Friendships'
        type: array
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  controllers.GetFriendshipReply:
    properties:
      data:
        $ref: '#/definitions/controllers.FriendshipReply'
    type: object
  controllers.GetOverdueDeathsReply:
    properties:
      data:
        items:
          $ref: '#/definitions/models.OverdueDeaths'
        type: array
    type: object
  controllers.GetSportReply:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Sport'
        type: array
    type: object
  controllers.GetSportTotalReply:
    properties:
      results:
        items:
          $ref: '#/definitions/models.SportAmount'
        type: array
    type: object
  controllers.GetStreakReply:
    properties:
      data:
        description: Data contains the streak information for the user
        items:
          $ref: '#/definitions/models.DayStreak'
        type: array
    type: object
  controllers.MessageResponse:
    properties:
      message:
        description: the response message
        type: string
    type: object
  controllers.PatchSportReply:
    properties:
      message:
        type: string
    type: object
  controllers.PatchSportRequest:
    properties:
      amount:
        example: 21
        type: integer
      game:
        example: league
        type: string
      id:
        example: 42
        type: integer
      kind:
        example: push-ups
        type: string
    required:
    - id
    type: object
  controllers.PostOverdueDeathsReply:
    properties:
      data:
        allOf:
        - $ref: '#/definitions/models.OverdueDeaths'
        description: Data structure containing a user's overdue deaths
    type: object
  controllers.PostOverdueDeathsRequest:
    properties:
      count:
        example: 42
        minimum: 0
        type: integer
      game:
        example: overwatch
        type: string
    required:
    - game
    type: object
  controllers.PostSportReply:
    properties:
      message:
        type: string
      results:
        items:
          $ref: '#/definitions/models.SportAmount'
        type: array
    type: object
  models.DayStreak:
    properties:
      days:
        example: 54
        type: integer
      user_id:
        example: 123456789012345678
        type: integer
    type: object
  models.FriendshipStatus:
    enum:
    - pending
    - accepted
    - blocked
    type: string
    x-enum-varnames:
    - Pending
    - Accepted
    - blocked
  models.Friendships:
    properties:
      created_at:
        type: string
      id:
        type: integer
      recipient_id:
        type: integer
      requester_id:
        type: integer
      status:
        $ref: '#/definitions/models.FriendshipStatus'
    type: object
  models.OverdueDeaths:
    properties:
      count:
        example: 69
        type: integer
      game:
        example: overwatch
        type: string
      user_id:
        example: 348922315062044675
        type: integer
    type: object
  models.PostSportRequest:
    properties:
      amount:
        description: The amount of Exercises done
        example: 42
        type: integer
      game:
        description: The Game, this sport-record belongs to
        example: overwatch
        type: string
      id:
        description: ID of the user, who did the sport - currently set by the API
        type: integer
      kind:
        description: Kind of the sport
        example: push-up
        type: string
      timedate:
        description: when the sport was done as UTC time - currently set by the API
        example: "1751897680.372402"
        type: string
      user_id:
        description: UserID of the user, who did the sport - currently set by the
          API
        example: 362262726221349761
        type: integer
    required:
    - amount
    - game
    - kind
    type: object
  models.Sport:
    properties:
      amount:
        type: integer
      game:
        type: string
      id:
        type: integer
      kind:
        type: string
      timedate:
        type: string
      user_id:
        type: integer
    type: object
  models.SportAmount:
    properties:
      amount:
        example: 1238
        type: integer
      kind:
        example: push-up
        type: string
    type: object
  models.User:
    properties:
      avatar:
        type: string
      discriminator:
        type: string
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
info:
  contact: {}
  description: Provides all methods to persist data for GoToHell
  title: GoToHell Gin REST API
paths:
  /api/friends:
    get:
      consumes:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetFriendshipReply'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorReply'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/controllers.ErrorReply'
      security:
      - CookieAuth: []
      summary: returns all friendships for the logged-in user along with friend details.
      tags:
      - friends
  /api/overdue-deaths:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Payload containing the game to delete the overdue deaths for
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.DeleteOverdueDeathsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.DeleteOverdueDeathsRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorReply'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorReply'
      security:
      - CookieAuth: []
      summary: Deletes a user's overdue deaths record for a specific game
      tags:
      - OverdueDeaths
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetOverdueDeathsReply'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorReply'
      security:
      - CoockieAuth: []
      summary: Get all OverdueDeaths records for the logged in user
      tags:
      - OverdueDeaths
    patch:
      consumes:
      - application/json
      parameters:
      - description: Payload containing the game and count
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.PostOverdueDeathsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.PostOverdueDeathsReply'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorReply'
      security:
      - CookieAuth: []
      summary: Updates (only) the death <count> for the given <game> of the logged
        in user
      tags:
      - OverdueDeaths
    post:
      consumes:
      - application/json
      parameters:
      - description: Payload containing the game and count
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.PostOverdueDeathsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.PostOverdueDeathsReply'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorReply'
      security:
      - CookieAuth: []
      summary: Creates (only) the death <count> for the given <game> of the logged
        in user
      tags:
      - OverdueDeaths
    put:
      consumes:
      - application/json
      parameters:
      - description: Payload containing the game and count
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.PostOverdueDeathsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.PostOverdueDeathsReply'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorReply'
      security:
      - CookieAuth: []
      summary: Creates or updates the death <count> for the given <game> of the logged
        in user
      tags:
      - OverdueDeaths
  /api/sports:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Sport ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.DeleteSportsReply'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorReply'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorReply'
      security:
      - CookieAuth: []
      summary: Delete a sport entry
      tags:
      - sport
    get:
      consumes:
      - application/json
      parameters:
      - description: Comma-separated list of user IDs without whitespace
        in: query
        name: user_ids
        required: true
        type: string
      - description: Limit the number of results returned, default is 50
        in: query
        name: limit
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetSportReply'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorReply'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorReply'
      security:
      - CookieAuth: []
      summary: Get sports for all users provided in the query parameter
      tags:
      - sport
    patch:
      consumes:
      - application/json
      parameters:
      - description: Paylaod of the sport to change
        in: body
        name: sport
        required: true
        schema:
          $ref: '#/definitions/controllers.PatchSportRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.PatchSportReply'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorReply'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorReply'
      security:
      - CookieAuth: []
      summary: Update a sport entry by ID
      tags:
      - sport
    post:
      consumes:
      - application/json
      parameters:
      - description: Sport Payload(s)
        in: body
        name: sport
        required: true
        schema:
          items:
            $ref: '#/definitions/models.PostSportRequest'
          type: array
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.PostSportReply'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorReply'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorReply'
      security:
      - CookieAuth: []
      summary: Create a sport entry
      tags:
      - sport
  /api/sports/total:
    get:
      consumes:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetSportTotalReply'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorReply'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorReply'
      security:
      - CookieAuth: []
      summary: Get the total amounts of every sport kind
      tags:
      - sport
  /api/streak:
    get:
      parameters:
      - description: Comma-separated list of user IDs without spaces
        in: query
        name: user_ids
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.GetStreakReply'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controllers.ErrorReply'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controllers.ErrorReply'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/controllers.ErrorReply'
      security:
      - CookieAuth: []
      summary: retrieves the number of days a user has been active back to back
      tags:
      - Streak
  /friends:
    post:
      consumes:
      - application/json
      parameters:
      - description: Friend request payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/controllers.FriendRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.MessageResponse'
      summary: Creates a request for a friend request
securityDefinitions:
  CookieAuth:
    in: cookie
    name: discord_auth
    type: apiKey
swagger: "2.0"
