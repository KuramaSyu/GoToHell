{
    "swagger": "2.0",
    "info": {
        "description": "Provides all methods to persist data for GoToHell",
        "title": "GoToHell Gin REST API",
        "contact": {}
    },
    "paths": {
        "/api/overdue-deaths": {
            "get": {
                "security": [
                    {
                        "CoockieAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OverdueDeaths"
                ],
                "summary": "Get all OverdueDeaths records for the logged in user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetOverdueDeathsReply"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorReply"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OverdueDeaths"
                ],
                "summary": "Creates or updates the death \u003ccount\u003e for the given \u003cgame\u003e of the logged in user",
                "parameters": [
                    {
                        "description": "Payload containing the game and count",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.PostOverdueDeathsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.PostOverdueDeathsReply"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorReply"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OverdueDeaths"
                ],
                "summary": "Creates (only) the death \u003ccount\u003e for the given \u003cgame\u003e of the logged in user",
                "parameters": [
                    {
                        "description": "Payload containing the game and count",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.PostOverdueDeathsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.PostOverdueDeathsReply"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorReply"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OverdueDeaths"
                ],
                "summary": "Deletes a user's overdue deaths record for a specific game",
                "parameters": [
                    {
                        "description": "Payload containing the game to delete the overdue deaths for",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.DeleteOverdueDeathsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.DeleteOverdueDeathsRequest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorReply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorReply"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OverdueDeaths"
                ],
                "summary": "Updates (only) the death \u003ccount\u003e for the given \u003cgame\u003e of the logged in user",
                "parameters": [
                    {
                        "description": "Payload containing the game and count",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.PostOverdueDeathsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.PostOverdueDeathsReply"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorReply"
                        }
                    }
                }
            }
        },
        "/api/sports": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "sport"
                ],
                "summary": "Get sports for all users provided in the query parameter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comma-separated list of user IDs without whitespace",
                        "name": "user_ids",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Limit the number of results returned, default is 50",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetSportReply"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorReply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorReply"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "sport"
                ],
                "summary": "Create a sport entry",
                "parameters": [
                    {
                        "description": "Sport Payload(s)",
                        "name": "sport",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.PostSportRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/controllers.PostSportReply"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorReply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorReply"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "sport"
                ],
                "summary": "Delete a sport entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sport ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/controllers.DeleteSportsReply"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorReply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorReply"
                        }
                    }
                }
            }
        },
        "/friends": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Creates a request for a friend request",
                "parameters": [
                    {
                        "description": "Friend request payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.FriendRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.MessageResponse"
                        }
                    }
                }
            }
        },
        "/streak": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Streak"
                ],
                "summary": "retrieves the number of days a user has been active back to back",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comma-separated list of user IDs without spaces",
                        "name": "user_ids",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetStreakReply"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorReply"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorReply"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.DeleteOverdueDeathsRequest": {
            "type": "object",
            "required": [
                "game"
            ],
            "properties": {
                "game": {
                    "type": "string",
                    "example": "overwatch"
                }
            }
        },
        "controllers.DeleteSportsReply": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "controllers.ErrorReply": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "controllers.FriendRequest": {
            "type": "object",
            "required": [
                "friend_id"
            ],
            "properties": {
                "friend_id": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/models.FriendshipStatus"
                }
            }
        },
        "controllers.GetOverdueDeathsReply": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.OverdueDeaths"
                    }
                }
            }
        },
        "controllers.GetSportReply": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Sport"
                    }
                }
            }
        },
        "controllers.GetStreakReply": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data contains the streak information for the user",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DayStreak"
                    }
                }
            }
        },
        "controllers.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "the response message",
                    "type": "string"
                }
            }
        },
        "controllers.PostOverdueDeathsReply": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data structure containing a user's overdue deaths",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.OverdueDeaths"
                        }
                    ]
                }
            }
        },
        "controllers.PostOverdueDeathsRequest": {
            "type": "object",
            "required": [
                "game"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 42
                },
                "game": {
                    "type": "string",
                    "example": "overwatch"
                }
            }
        },
        "controllers.PostSportReply": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SportAmount"
                    }
                }
            }
        },
        "models.DayStreak": {
            "type": "object",
            "properties": {
                "days": {
                    "type": "integer",
                    "example": 54
                },
                "user_id": {
                    "type": "integer",
                    "example": 123456789012345678
                }
            }
        },
        "models.FriendshipStatus": {
            "type": "string",
            "enum": [
                "pending",
                "accepted",
                "blocked"
            ],
            "x-enum-varnames": [
                "Pending",
                "Accepted",
                "blocked"
            ]
        },
        "models.OverdueDeaths": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer",
                    "example": 69
                },
                "game": {
                    "type": "string",
                    "example": "overwatch"
                },
                "user_id": {
                    "type": "integer",
                    "example": 348922315062044675
                }
            }
        },
        "models.PostSportRequest": {
            "type": "object",
            "required": [
                "amount",
                "game",
                "kind"
            ],
            "properties": {
                "amount": {
                    "description": "The amount of Exercises done",
                    "type": "integer",
                    "example": 42
                },
                "game": {
                    "description": "The Game, this sport-record belongs to",
                    "type": "string",
                    "example": "overwatch"
                },
                "id": {
                    "description": "ID of the user, who did the sport - currently set by the API",
                    "type": "integer"
                },
                "kind": {
                    "description": "Kind of the sport",
                    "type": "string",
                    "example": "push-up"
                },
                "timedate": {
                    "description": "when the sport was done as UTC time - currently set by the API",
                    "type": "string",
                    "example": "1751897680.372402"
                },
                "user_id": {
                    "description": "UserID of the user, who did the sport - currently set by the API",
                    "type": "integer",
                    "example": 362262726221349761
                }
            }
        },
        "models.Sport": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "game": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "kind": {
                    "type": "string"
                },
                "timedate": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "models.SportAmount": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer",
                    "example": 1238
                },
                "kind": {
                    "type": "string",
                    "example": "push-up"
                }
            }
        }
    },
    "securityDefinitions": {
        "CookieAuth": {
            "type": "apiKey",
            "name": "discord_auth",
            "in": "cookie"
        }
    }
}